Traceback (most recent call last):
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\asyncio\base_events.py", line 686, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#Step-2
import sqlite3
import pandas as pd

# Define the SQL query to join normalized tables and fetch data
query = """
SELECT 
    loc.Proximity_to_Industrial_Areas, 
    loc.Population_Density, 
    air.Temperature, 
    air.Humidity, 
    air.PM2_5 AS PM2_5, 
    air.PM10 AS PM10, 
    air.NO2, 
    air.SO2, 
    air.CO, 
    air.Air_Quality
FROM 
    LocationAirQuality AS link
JOIN 
    Location AS loc ON link.Location_ID = loc.Location_ID
JOIN 
    AirQuality AS air ON link.Measurement_ID = air.Measurement_ID;
"""

# Connect to the SQLite database and fetch data
try:
    with sqlite3.connect("pollution_data_normalized.db") as conn:
        # Execute the query and load the result into a Pandas DataFrame
        data = pd.read_sql_query(query, conn)
        print("Data successfully fetched and loaded into a Pandas DataFrame.")
        print(data.head())  # Display the first few rows of the DataFrame
        
        # Save the data to a CSV file for downstream steps
        data.to_csv("data_from_step_2.csv", index=False)
        print("Data saved to 'data_from_step_2.csv'.")
except sqlite3.Error as e:
    print(f"An error occurred while fetching data: {e}")
smpl = pd.read_csv("data_from_step_2.csv")
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[2], line 3[0m
[0;32m      1[0m [38;5;66;03m#Step-2[39;00m
[0;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01msqlite3[39;00m
[1;32m----> 3[0m [38;5;28;01mimport[39;00m [38;5;21;01mpandas[39;00m [38;5;28;01mas[39;00m [38;5;21;01mpd[39;00m
[0;32m      5[0m [38;5;66;03m# Define the SQL query to join normalized tables and fetch data[39;00m
[0;32m      6[0m query [38;5;241m=[39m [38;5;124m"""[39m
[0;32m      7[0m [38;5;124mSELECT [39m
[0;32m      8[0m [38;5;124m    loc.Proximity_to_Industrial_Areas, [39m
[1;32m   (...)[0m
[0;32m     23[0m [38;5;124m    AirQuality AS air ON link.Measurement_ID = air.Measurement_ID;[39m
[0;32m     24[0m [38;5;124m"""[39m

[1;31mModuleNotFoundError[0m: No module named 'pandas'

