Traceback (most recent call last):
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\asyncio\base_events.py", line 686, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Saket\anaconda3\envs\portfolio\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import csv
import sqlite3

# File path to the dataset
data_path = "updated_pollution_dataset.csv"

# Step 1: Normalize the dataset
locations = {}
measurements = {}
location_id_counter = 1
measurement_id_counter = 1
link_table = []

# Read the CSV file and normalize data
with open(data_path, 'r') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        # Create Location Table
        location_tuple = (row["Proximity_to_Industrial_Areas"], row["Population_Density"])
        if location_tuple not in locations:
            locations[location_tuple] = location_id_counter
            location_id_counter += 1
        location_id = locations[location_tuple]

        # Create Air Quality Table
        measurement_tuple = (
            row["Temperature"], row["Humidity"], row["PM2.5"], row["PM10"],
            row["NO2"], row["SO2"], row["CO"], row["Air Quality"]
        )
        if measurement_tuple not in measurements:
            measurements[measurement_tuple] = measurement_id_counter
            measurement_id_counter += 1
        measurement_id = measurements[measurement_tuple]

        # Add to Link Table
        link_table.append((location_id, measurement_id))

# Save normalized tables to SQLite
try:
    with sqlite3.connect("pollution_data_normalized.db") as conn:
        cursor = conn.cursor()

        # Location Table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS Location (
                Location_ID INTEGER PRIMARY KEY,
                Proximity_to_Industrial_Areas REAL,
                Population_Density REAL
            )
        """)
        for location, loc_id in locations.items():
            cursor.execute("""
                INSERT INTO Location (Location_ID, Proximity_to_Industrial_Areas, Population_Density)
                VALUES (?, ?, ?)
            """, (loc_id, location[0], location[1]))

        # Air Quality Table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS AirQuality (
                Measurement_ID INTEGER PRIMARY KEY,
                Temperature REAL,
                Humidity REAL,
                PM2_5 REAL,
                PM10 REAL,
                NO2 REAL,
                SO2 REAL,
                CO REAL,
                Air_Quality TEXT
            )
        """)
        for measurement, meas_id in measurements.items():
            cursor.execute("""
                INSERT INTO AirQuality (Measurement_ID, Temperature, Humidity, PM2_5, PM10, NO2, SO2, CO, Air_Quality)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (meas_id, *measurement))

        # LocationAirQuality Link Table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS LocationAirQuality (
                Location_ID INTEGER,
                Measurement_ID INTEGER,
                PRIMARY KEY (Location_ID, Measurement_ID),
                FOREIGN KEY (Location_ID) REFERENCES Location(Location_ID),
                FOREIGN KEY (Measurement_ID) REFERENCES AirQuality(Measurement_ID)
            )
        """)
        cursor.executemany("""
            INSERT INTO LocationAirQuality (Location_ID, Measurement_ID)
            VALUES (?, ?)
        """, link_table)

        conn.commit()
        print("Normalized database created successfully!")
except sqlite3.Error as e:
    print(f"An error occurred while creating the database: {e}")

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [1;32mIn[1], line 15[0m
[0;32m     12[0m link_table [38;5;241m=[39m []
[0;32m     14[0m [38;5;66;03m# Read the CSV file and normalize data[39;00m
[1;32m---> 15[0m [38;5;28;01mwith[39;00m [38;5;28;43mopen[39;49m[43m([49m[43mdata_path[49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mr[39;49m[38;5;124;43m'[39;49m[43m)[49m [38;5;28;01mas[39;00m csvfile:
[0;32m     16[0m     reader [38;5;241m=[39m csv[38;5;241m.[39mDictReader(csvfile)
[0;32m     17[0m     [38;5;28;01mfor[39;00m row [38;5;129;01min[39;00m reader:
[0;32m     18[0m         [38;5;66;03m# Create Location Table[39;00m

File [1;32m~\anaconda3\envs\portfolio\Lib\site-packages\IPython\core\interactiveshell.py:324[0m, in [0;36m_modified_open[1;34m(file, *args, **kwargs)[0m
[0;32m    317[0m [38;5;28;01mif[39;00m file [38;5;129;01min[39;00m {[38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m2[39m}:
[0;32m    318[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[0;32m    319[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mIPython won[39m[38;5;124m'[39m[38;5;124mt let you open fd=[39m[38;5;132;01m{[39;00mfile[38;5;132;01m}[39;00m[38;5;124m by default [39m[38;5;124m"[39m
[0;32m    320[0m         [38;5;124m"[39m[38;5;124mas it is likely to crash IPython. If you know what you are doing, [39m[38;5;124m"[39m
[0;32m    321[0m         [38;5;124m"[39m[38;5;124myou can use builtins[39m[38;5;124m'[39m[38;5;124m open.[39m[38;5;124m"[39m
[0;32m    322[0m     )
[1;32m--> 324[0m [38;5;28;01mreturn[39;00m [43mio_open[49m[43m([49m[43mfile[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

[1;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'updated_pollution_dataset.csv'

